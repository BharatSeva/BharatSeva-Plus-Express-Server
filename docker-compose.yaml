version: '3.8'

services:
  nodejs-application:
    build:
      context: ./nodejs-application
    container_name: nodejs-application
    image: nodejs-application
    ports:
      - "83:5000"
  prometheus:
    container_name: prometheus-svc
    image: prom/prometheus
    ports: 
      - "9091:9090"
    command: --config.file=/etc/prometheus/prometheus.yaml
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
  grafana:
    image: grafana/grafana:5.0.4
    ports:
      - "3001:3000"
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  grafana-dashboards:
    image: alpine:3.10
    depends_on:
      - grafana
    volumes:
      - ./grafana-data:/grafana
    command: >
      /bin/sh -c "
        apk add --no-cache curl
        echo 'waiting for grafana'
        sleep 5s
        cd /grafana
        curl --request POST http://grafana:3000/api/datasources --header 'Content-Type: application/json' -d @datasources.json
        curl --request POST http://grafana:3000/api/dashboards/db --header 'Content-Type: application/json' -d @dashboard.json"
  express-server:
    build: .
    ports: 
     - "5000:5000"
    restart: always
    environment:
      - PORT=5000
      - MONGODB_URL=mongodb://mongodb:27017/mydatabase
      - JWT_SECRET_KEY=JWT_SECRET_KEY
      - Patient_JWT_SECRET_KEY=30d
      - SENDEREMAIL=SENDEREMAIL
      - SENDERPASSWORD=SENDERPASSWORD
      - JWT_LIFETIME=30d
      - Patient_JWT_LIFETIME=30d
      
      - apiKey=<apiKey>
      - authDomain=<authDomain>
      - projectId=<projectId>
      - storageBucket=<storageBucket>
      - messagingSenderId=<messagingSenderId>
      - appId=<appId>
      - measurementId=<measurementId>
    depends_on:
      - mongodb

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db


volumes:
  mongodb_data:
    name: mongodb_data